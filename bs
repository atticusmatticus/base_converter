#!/usr/bin/env python

import sys


def print_help(ex):
    print(f"Usage:\t$ {ex} <number1> <number2> ...")
    print(f"Hex: 0x___\tDec: ___\tBin: 0b___")


def get_offset(vals):
    # print(vals)
    # print(f"DEBUG: Lens: {[len(val) for val in vals]}")
    nTabs = int(max([len(val) for val in vals]) / 8) + 1 # 8 spaces in a tab
    # print(f"DEBUG: nTabs: {nTabs}")
    return nTabs


def convert_base(ex, val):
    if val[0:2] == '0x':
        d = int(val, base=16)
        h = hex(d)
        b = bin(d)
    elif val[0:2] == '0b':
        d = int(val, base=2)
        h = hex(d)
        b = bin(d)
    elif val.isdigit():
        d = int(val, base=10)
        h = hex(d)
        b = bin(d)
    else:
        print_help(ex)
    return h, d, b


def write_out(val, h, d, b, nTabs):
    # print(f"DEBUG: len(val): {len(val)}")

    if (len(val) > 8*(nTabs-1)) and (nTabs > 1):
        print_statement(val, h, d, b, nTabs-(int(len(val)/8)))
    elif (len(val) == 8*(nTabs-1)) and (nTabs > 1):
        print_statement(val, h, d, b, nTabs-1)
    else:
        print_statement(val, h, d, b, nTabs)


def print_statement(val, h, d, b, nTabs):
    tabs = '\t'*nTabs
    print(f"{val}{tabs}==>\t{h}\t{d}\t{b}")


def main():
    CLargs = sys.argv
    # print(f"DEBUG: The list:\t{CLargs}")
    
    if ('--help' in CLargs) or ('-h' in CLargs) or len(CLargs)<2:
        print_help(CLargs[0])
    else:
        ex, vals = CLargs[0], CLargs[1:]
        nTabs = get_offset(vals)
        for val in vals:
            h, d, b, = convert_base(ex, val)
            write_out(val, h, d, b, nTabs)




if __name__ == '__main__':
    main()